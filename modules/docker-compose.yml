version: '3'

services:
  postgres:
    image: "postgis/postgis:12-2.5-alpine"
    env_file:
      - postgres.env # configures postgres
    volumes:
      - postgres-data:/var/lib/postgresql/data/ # persist data even if container shuts down

  persons_api:
    build: persons_api
    volumes:
      - ./persons_api:/backend
    environment:
      - FLASK_ENV=development
      - FLASK_APP=app/__init__.py
    ports:
      - "30002:5000"

  connections_api:
    build: connections_api
    volumes:
      - ./connections_api:/backend
    environment:
      - FLASK_ENV=development
      - FLASK_APP=app/__init__.py
    ports:
      - "30003:5000"

  location_events_api:
    build: location_events_api
    depends_on:
      - kafka, zookeeper
    #command: ["./wait-for-it.sh", "kafka:9093", "--", "python", "app/grpc_server.py"]
    command: ["python", "app/grpc_server.py"]
    volumes:
      - ./location_events_api:/backend
    ports:
      - "30004:5000"
    networks:
      - app-tier

  location_processor:
    build: location_processor
    depends_on:
      - kafka, zookeeper
    command: ["python", "location_processor_service.py"]
    volumes:
      - ./location_processor:/backend
    ports:
      - "30005:5000"
    networks:
      - app-tier

  #from: https://github.com/bitnami/bitnami-docker-kafka#how-to-use-this-image
  zookeeper:
    image: 'bitnami/zookeeper:latest'
    ports:
      - '2181:2181'
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes
    networks:
      - app-tier

  kafka:
    image: 'bitnami/kafka:latest'
    ports:
      - '9093:9092'
    environment:
      - KAFKA_BROKER_ID=1
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092
      - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2181
      - ALLOW_PLAINTEXT_LISTENER=yes
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CLIENT:PLAINTEXT,EXTERNAL:PLAINTEXT
      - KAFKA_CFG_LISTENERS=CLIENT://:9092,EXTERNAL://:9093
      - KAFKA_CFG_ADVERTISED_LISTENERS=CLIENT://kafka:9092,EXTERNAL://localhost:9093 #PLAINTEXT://127.0.0.1:9092,
      - KAFKA_INTER_BROKER_LISTENER_NAME=CLIENT
    depends_on:
      - zookeeper
    networks:
      - app-tier

  frontend:
    tty: true
    build: frontend
    command: ["npm", "start"]
    volumes:
      - ./frontend:/frontend
      - node-modules:/frontend/node_modules
    environment:
      - NODE_ENV=development
    ports:
      - '3000:3000'
    depends_on:
      - persons_api
      - connections_api
      - locations_api

volumes: # named volumes can be managed easier using docker-compose
  node-modules:
  postgres-data: 

networks:
  app-tier:
